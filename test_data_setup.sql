-- Test Data Setup for Mandal Authentication System
-- Run this after setting up the database schema

-- Insert test users with hashed passwords
-- Note: These are SHA-256 hashes of simple passwords for testing

-- Test User 1: Admin (password: "admin123")
INSERT INTO public.users (name, email, phone, role, password_hash, email_verified) 
VALUES (
    'Test Admin',
    'admin@test.com',
    '+1234567890',
    'Admin',
    'b1cc1b3bc88c0e8aa7cf9e8f8b6bc8b8c3e7a9e3cc1b3bc88c0e8aa7cf9e8f8b', -- SHA-256 of "admin123"
    true
) ON CONFLICT (email) DO NOTHING;

-- Test User 2: Manager (password: "manager123")
INSERT INTO public.users (name, email, phone, role, password_hash, email_verified) 
VALUES (
    'Test Manager',
    'manager@test.com',
    '+1234567891',
    'Manager',
    'a5e7b5c5a9e3c1b3bc88c0e8aa7cf9e8f8b6bc8b8c3e7a9e3cc1b3bc88c0e8a', -- SHA-256 of "manager123"
    true
) ON CONFLICT (email) DO NOTHING;

-- Test User 3: Member (password: "member123")
INSERT INTO public.users (name, email, phone, role, password_hash, email_verified) 
VALUES (
    'Test Member',
    'member@test.com',
    '+1234567892',
    'Member',
    'c9e8f8b6bc8b8c3e7a9e3cc1b3bc88c0e8aa7cf9e8f8b6bc8b8c3e7a9e3cc1b', -- SHA-256 of "member123"
    true
) ON CONFLICT (email) DO NOTHING;

-- Verify the test users were created
SELECT 
    name,
    email,
    phone,
    role,
    email_verified,
    created_at
FROM public.users 
WHERE email LIKE '%@test.com'
ORDER BY role, name;

-- Note: The actual password hashes above are examples. 
-- The real hashes will be generated by your Flutter app when you register users.
-- To get the actual SHA-256 hash of a password, you can use online tools or:
-- In PostgreSQL: SELECT encode(digest('your_password', 'sha256'), 'hex');

-- Example of how to generate proper password hashes in PostgreSQL:
SELECT 
    'admin123' as password,
    encode(digest('admin123', 'sha256'), 'hex') as sha256_hash
UNION ALL
SELECT 
    'manager123' as password,
    encode(digest('manager123', 'sha256'), 'hex') as sha256_hash
UNION ALL
SELECT 
    'member123' as password,
    encode(digest('member123', 'sha256'), 'hex') as sha256_hash;
